import Head from "next/head";
import { useEffect, useRef, useState } from "react";
// import { api } from "~/utils/api";

const SIZE = 400;

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [mousePosition, setMousePosition] = useState<[number, number]>([0, 0]);
  const [drawing, setDrawing] = useState(false);
  const [canvasImage, setCanvasImage] = useState<string | undefined>(undefined);

  useEffect(() => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const context = canvas.getContext("2d");
    if (!context) throw Error("Could not get context");

    canvas.addEventListener("mousedown", () => {
      setDrawing(true);
    });
    canvas.addEventListener("mouseup", () => {
      setDrawing(false);
    });

    canvas.addEventListener("mousemove", (e) => {
      setMousePosition([e.offsetX, e.offsetY]);
    });
    canvas.addEventListener("mouseout", () => console.log("we are out"));

    context.fillStyle = "#000";
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = "#f00";
    context.fillRect(0, 0, canvas.width / 2, canvas.height / 2);
  }, []);

  return (
    <>
      <Head>
        <title>OCR - vision</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <p>Drawing: {drawing ? "Yes" : "No"}</p>
      <p>
        Position: ({mousePosition[0]}, {mousePosition[1]})
      </p>
      <canvas ref={canvasRef} width={SIZE} height={SIZE} />

      <button
        type="submit"
        // className={button}
        onClick={() => {
          if (!canvasRef.current) throw Error("crash and burn!");
          const image = new Image();
          image.src = canvasRef.current.toDataURL();
          image.onload = () => {
            setCanvasImage(image.src);
          };
        }}
      >
        Submit
      </button>
      {/* {canvasImage && <img src={canvasImage} alt="my image" />} */}
    </>
  );
}
